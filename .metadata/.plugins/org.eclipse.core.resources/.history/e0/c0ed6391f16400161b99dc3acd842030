# coding=gbk

import pandas as pd
from pandas import Series
from pandas import DataFrame
import matplotlib.pyplot as plt
import numpy as np

import helper
import dp_config

index_list = {}
index_list['hs300'] = '000300.SH'
index_list['zz500'] = '000905.SH'
index_list['sz50'] = '000016.SH'
index_list['cybz'] = '399006.SZ'
index_list['cybzh'] = '399102.SZ'

data_set = {}
start_date = '\'20000101\''
short = True

def get_index_from_db(wind_code, conn):
    '''
    希望可以自己设置数据库，设置获取不同数据(用什么价格购买，卖出)
    '''
    
    sql_string = ("select TRADE_DT, S_INFO_WINDCODE, S_DQ_CLOSE, S_DQ_PCTCHANGE " 
                  "from AINDEXEODPRICES " 
                  "where S_INFO_WINDCODE = \'%s\' and TRADE_DT > %s"
                  "order by TRADE_DT" % (wind_code, start_date))
    data = pd.read_sql(sql_string, conn, index_col='trade_dt', parse_dates=['trade_dt'])
    data.columns = ['code', 'close', 'return']
#     data.set_index('trade_dt')
    return data
#     print(data)
    



def strategy_ma(short_term, long_term):
    '''
    
    '''
def cross_point(data, short_term, long_term):
    '''
    找出两列所有交叉点的行, short_term 是列名
    ''' 
    previous_short = data[short_term].shift[1]
    previous_long = data[long_term].shift[1]
    crossing = (((data[short_term] <= data[long_term]) & (previous_short >= previous_long))
            | ((data[short_term] >= data[long_term]) & (previous_short <= previous_long)))
    
    crossing_dates = data.loc[crossing]
    
    
def cal_return(short_term, long_term, short = True, short_ua = '000300.SH'):
     '''
     只是均线穿越的return，其他并未适配
     '''
     
if __name__ == '__main__':
    
    server = '253'
    db_name = 'wddb'
    conn = helper.connect_to_database(dp_config.db_driver[server], dp_config.db_ip[server], dp_config.db_port[server],
                                      'wddb', dp_config.db_usr[server], dp_config.db_pwd[server])
    
    # 设置标的物
    ua_string = index_list['zz500']
    ua = ua_string
    
    data = get_index_from_db(ua_string, conn)
    
    ma_days_list = {}
    
    name_list = ['ma_5', 'ma_10']
    value_list = [5, 20]
    
    for i in range(len(name_list)):
        data = helper.ma_simple(data, value_list[i], column_name = name_list[i])
    
    
    data = helper.delete_na(data)
    
    data_set[ua] = data
    
    #get a slice of data
    data_fig_ma = data.loc[:,name_list]
#     data_fig_ma.plot()
    
#     data_set[ua]['spread_5_10'] = data_set[ua]['ma_5'] > data_set[ua]['ma_10']
    '''
    找出所有crossover point
    '''
    previous_5 = data_set[ua]['ma_5'].shift(1)
    previous_10 = data_set[ua]['ma_10'].shift(1)
    
    crossing = (((data_set[ua]['ma_5'] <= data_set[ua]['ma_10']) & (previous_5 >= previous_10))
            | ((data_set[ua]['ma_5'] >= data_set[ua]['ma_10']) & (previous_5 <= previous_10)))
    
    crossing_dates = data_set[ua].loc[crossing]
#     print(crossing_dates)
    '''
    计算return
    '''
    data_set[ua]['spread_5_10'] = data_set[ua]['ma_5'] > data_set[ua]['ma_10']
    data_set[ua]['spread_5_10'] = data_set[ua]['spread_5_10'].shift(1)
#     print(data_set[ua]['spread_5_10'])
    
    if short:
        data_set[ua]['ret_5_10'] = (data_set[ua].apply(lambda x: x['return'] if x['spread_5_10'] else -x['return'], axis=1))/100 + 1
    else:
        data_set[ua]['ret_5_10'] = (data_set[ua].apply(lambda x: x['return'] if x['spread_5_10'] else 0, axis=1))/100 + 1
#     data_set[ua]['cumsum_5_10'] = data_set[ua]['ret_5_10'].cumsum()/100
    data_set[ua]['cumsum_5_10'] = data_set[ua]['ret_5_10'].cumprod()
    print(data_set[ua])
#     data_set[ua]['spread_5_10'].plot()
#     data_set[ua]['cumsum_5_10'].plot()
#     (data_set[ua]['return'].cumsum()/100).plot()
    index_ret = ua_string+'_ret'
    data_set[ua][index_ret] = (data_set[ua]['return']/100+1).cumprod()
    data_set[ua].loc[:,['cumsum_5_10', index_ret]].plot()
    plt.show()
    
    
    
    
    
    
    
    